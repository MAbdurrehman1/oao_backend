from fastapi import Request
from fastapi.security import APIKeyHeader

from cexceptions import (
    MissingEntityException,
    UnauthorizedException,
    ValidationException,
)
from entity import User
from services import check_user_is_employee, check_user_is_manager, check_etl_token
from settings import configs
from services.user_service import authenticate_user, get_user_by_id

auth_header = APIKeyHeader(name=configs.auth_header, scheme_name=configs.auth_header)


def _fetch_impersonation_user_id(params: dict) -> int:
    user_id_value = params.get("user_id")
    if not user_id_value:
        raise MissingEntityException(entity="User ID")
    try:
        user_id = int(user_id_value)
        return user_id
    except ValueError:
        raise ValidationException(entities="User ID", values=str(user_id_value))


def fetch_user(request: Request) -> User:
    header_payload = request.headers.get(configs.auth_header)
    if not header_payload:
        raise MissingEntityException(entity="Authorization Header")
    token = header_payload.replace("Bearer ", "")
    user = authenticate_user(token)
    if user.is_admin:
        params = dict(request.query_params)
        if params.get("impersonation"):
            user_id = _fetch_impersonation_user_id(params)
            return get_user_by_id(user_id=user_id)
        return user
    return user


class AdminRequired:
    """
    Checks if a user is "OAO" Admins or not
    """

    def __call__(self, request: Request):
        user = fetch_user(request)
        if user.is_admin:
            return user
        raise UnauthorizedException()


class EmployeeRequired:
    """
    Checks if a user is employee or not
    """

    def __call__(self, request: Request):
        user = fetch_user(request)
        assert isinstance(user.id, int)
        if check_user_is_employee(user_id=user.id):
            return user
        raise UnauthorizedException()


class ManagerRequired:
    """
    Checks if a user is manager or not
    """

    def __call__(self, request: Request):
        user = fetch_user(request)
        assert isinstance(user.id, int)
        if check_user_is_manager(user_id=user.id):
            return user
        raise UnauthorizedException()


class ETLRequired:
    """
    Checks if request is generated by ETL
    """

    def __call__(self, request: Request):
        header_payload = request.headers.get(configs.auth_header)
        if not header_payload:
            raise MissingEntityException(entity="Authorization Header")
        token = header_payload.replace("Bearer ", "")
        if check_etl_token(token):
            return True
        raise UnauthorizedException()


class AdminOrManagerRequired:
    """
    Checks if a user is a manager or an admin, otherwise unauthorized
    """

    def __call__(self, request: Request):
        user = fetch_user(request)
        assert isinstance(user.id, int)
        if user.is_admin or check_user_is_manager(user_id=user.id):
            return user
        raise UnauthorizedException()
